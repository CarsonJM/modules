nextflow_function {

    name "Test rmEmptyFastQs"
    script "../main.nf"


    test("paired end + cleaned.fasta.gz") {
        function "rmEmptyFastQs"
        when {
            function {
            """
            input[0] = Channel.of(
                [
                    [ id:'nonempty', single_end:false], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                    ]
                ],
                [
                    [ id:'cleaned', single_end:true ], // meta map
                    file("${projectDir}/assets/test-datasets/genomics/sarscov2/illumina/fastq/cleaned.fastq.gz", checkIfExists: true)
                ]
            )
            input[1] = true
            """
            }
        }
        then {
            assertAll (
                { assert function.success },
                { assert snapshot(function.stdout).match() }
            )
        }
    }

    test("single end + empty.fastq.gz") {
        function "rmEmptyFastQs"
        when {
            function {
            """
            input[0] = Channel.of(
                [
                    [ id:'nonempty', single_end: true], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true)
                ],
                [
                    [ id:'empty', single_end:true ], // meta map
                    file("${projectDir}/assets/test-datasets/genomics/sarscov2/illumina/fastq/empty.fastq.gz", checkIfExists: true)
                ]
            )
            input[1] = true
            """
            }
        }
        then {
            assertAll (
                { assert function.success },
                { assert snapshot(function.stdout).match() }
            )
        }
    }
}